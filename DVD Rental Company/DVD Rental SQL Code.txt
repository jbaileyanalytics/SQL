In this SQL code the following is shown: create tables, create functions, create trigger, create stored procedure, execute stored procedure


-- SQL CODE TO CREATE THE DETAILS TABLE --
CREATE TABLE DETAILS (
	RENTAL_ID INT,
	FILM_ID INT,
	RENTAL_DATE TIMESTAMP,
	FILM_TITLE VARCHAR(255),
	CUSTOMER_ID INT,
	FIRST_NAME VARCHAR(50),
	LAST_NAME VARCHAR(50),
	PHONE VARCHAR(20),
	ADDRESS_ID INT,
	ADDRESS1 VARCHAR(75),
	ADDRESS2 VARCHAR(50),
	CITY_ID INT,
	CITY VARCHAR(50),
	ZIP_CODE VARCHAR(10)
);



-- SQL CODE TO INSERT THE DATA WE NEED INTO THE DETAILS TABLE --
INSERT INTO DETAILS
SELECT  R.RENTAL_ID, F.FILM_ID, R.RENTAL_DATE, F.TITLE, 
CUS.CUSTOMER_ID, CUS.FIRST_NAME, CUS.LAST_NAME, A.PHONE, A.ADDRESS_ID, 
A.ADDRESS, A.ADDRESS2, C.CITY_ID, C.CITY, A.POSTAL_CODE

FROM RENTAL R

INNER JOIN INVENTORY AS I ON R.INVENTORY_ID = I.INVENTORY_ID
INNER JOIN FILM AS F ON I.INVENTORY_ID = F.FILM_ID
INNER JOIN CUSTOMER AS CUS ON R.CUSTOMER_ID = CUS.CUSTOMER_ID
INNER JOIN ADDRESS AS A ON CUS.ADDRESS_ID = A.ADDRESS_ID
INNER JOIN CITY AS C ON A.CITY_ID = C.CITY_ID;




-- SQL CODE TO CREATE THE SUMMARYDATA TABLE --
CREATE TABLE SUMMARYDATA (
	CUSTOMER_ID INT,
	CUSTOMER VARCHAR(100),
	PHONE VARCHAR(20),
	ADDRESS VARCHAR(125),
	CITY VARCHAR(50),
	ZIPCODE VARCHAR(10),
	TOTAL_RENTALS INT
);




-- SQL CODE TO CREATE A FUNCTION TO TRANSFORM THE CUSTOMER NAME AND 
-- CUSTOMER ADDRESS FIELDS AND INSERT THE DATA INTO THE SUMMARY TABLE --
CREATE FUNCTION CHANGE_FIELDS()
RETURNS TRIGGER AS $CHANGE_FIELDS$
BEGIN
DELETE FROM SUMMARYDATA;
INSERT INTO SUMMARYDATA (
SELECT 	CUSTOMER_ID, 
		CONCAT(FIRST_NAME,' ',LAST_NAME) AS CUSTOMER, 
		PHONE, 
		CONCAT(ADDRESS1,' ',ADDRESS2) AS ADDRESS,
		CITY, 
		ZIP_CODE, 
		COUNT(RENTAL_ID) 
FROM DETAILS
GROUP BY CUSTOMER_ID, CUSTOMER, PHONE, ADDRESS, CITY, ZIP_CODE
ORDER BY COUNT(RENTAL_ID) DESC
);
RETURN NEW;
END; $CHANGE_FIELDS$
LANGUAGE PLPGSQL;




-- SQL CODE TO CREATE A TRIGGER ON THE DETAILS TABLE TO UPDATE THE SUMMARYDATA TABLE --
CREATE TRIGGER REFRESH_SUMMARYDATA
AFTER INSERT ON DETAILS
FOR EACH STATEMENT EXECUTE PROCEDURE CHANGE_FIELDS();





-- SQL CODE TO CREATE A STORED PROCEDURE THAT CAN BE RUN MONTHLY TO REFRESH
-- THE DETAILS AND SUMMARYDATA TABLES FOR THE LATEST UP TO DATE DATA --
CREATE PROCEDURE GET_LATEST_DATA()
LANGUAGE PLPGSQL AS $$
BEGIN
DELETE FROM DETAILS;
DELETE FROM SUMMARYDATA;
INSERT INTO DETAILS (
	RENTAL_ID,
	FILM_ID,
	RENTAL_DATE,
	FILM_TITLE,
	CUSTOMER_ID,
	FIRST_NAME,
	LAST_NAME,
	PHONE,
	ADDRESS_ID,
	ADDRESS1,
	ADDRESS2,
	CITY_ID,
	CITY,
	ZIP_CODE )
SELECT  R.RENTAL_ID, F.FILM_ID, R.RENTAL_DATE, F.TITLE, 
CUS.CUSTOMER_ID, CUS.FIRST_NAME, CUS.LAST_NAME, A.PHONE, A.ADDRESS_ID, 
A.ADDRESS, A.ADDRESS2, C.CITY_ID, C.CITY, A.POSTAL_CODE

FROM RENTAL R

INNER JOIN INVENTORY AS I ON R.INVENTORY_ID = I.INVENTORY_ID
INNER JOIN FILM AS F ON I.INVENTORY_ID = F.FILM_ID
INNER JOIN CUSTOMER AS CUS ON R.CUSTOMER_ID = CUS.CUSTOMER_ID
INNER JOIN ADDRESS AS A ON CUS.ADDRESS_ID = A.ADDRESS_ID
INNER JOIN CITY AS C ON A.CITY_ID = C.CITY_ID;

END;$$



-- SQL TO EXECUTE THE STORED PROCEDURE --
CALL GET_LATEST_DATA();



-- SQL CODE TO VERIFY DATA -- 
SELECT * FROM SUMMARYDATA
